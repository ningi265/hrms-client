// utils/generatePdfReport.js
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

export const generateApprovalReport = (reconciliation) => {
  try {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40);
    doc.text(`Travel Reconciliation Approval Report`, 15, 20);
    
    // Add subtitle
    doc.setFontSize(12);
    doc.text(`Approved on: ${formatDate(new Date())}`, 15, 30);
    doc.text(`Reconciliation ID: ${reconciliation.id}`, 15, 40);
    
    // Add employee info
    doc.setFontSize(14);
    doc.text(`Employee Information`, 15, 55);
    
    doc.setFontSize(12);
    doc.text(`Name: ${reconciliation.employeeName}`, 15, 65);
    doc.text(`Department: ${reconciliation.department}`, 15, 75);
    doc.text(`Employee ID: ${reconciliation.employeeId}`, 15, 85);
    
    // Add trip details
    doc.setFontSize(14);
    doc.text(`Trip Details`, 15, 100);
    
    doc.setFontSize(12);
    doc.text(`Purpose: ${reconciliation.purpose}`, 15, 110);
    doc.text(`Destination: ${reconciliation.city}, ${reconciliation.country}`, 15, 120);
    doc.text(`Dates: ${formatDate(reconciliation.departureDate)} - ${formatDate(reconciliation.returnDate)}`, 15, 130);
    
    // Add financial summary
    doc.setFontSize(14);
    doc.text(`Financial Summary`, 15, 145);
    
    const financialData = [
      ['Per Diem Allowance', formatCurrency(reconciliation.perDiemAmount, reconciliation.currency)],
      ['Total Expenses', formatCurrency(reconciliation.totalExpenses, reconciliation.currency)],
      ['Remaining Balance', formatCurrency(reconciliation.remainingBalance, reconciliation.currency)]
    ];
    
    // Use autoTable plugin
    autoTable(doc, {
      startY: 155,
      head: [['Item', 'Amount']],
      body: financialData,
      theme: 'grid',
      headStyles: { fillColor: [34, 139, 34] },
      styles: { cellPadding: 5 }
    });
    
    // Add expense details if they exist
    if (reconciliation.expenses && reconciliation.expenses.length > 0) {
      doc.setFontSize(14);
      doc.text(`Expense Details`, 15, doc.lastAutoTable.finalY + 20);
      
      const expenseData = reconciliation.expenses.map(expense => [
        formatDate(expense.date),
        expense.category,
        expense.description,
        formatCurrency(expense.amount, reconciliation.currency),
        expense.status
      ]);
      
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 30,
        head: [['Date', 'Category', 'Description', 'Amount', 'Status']],
        body: expenseData,
        theme: 'grid',
        headStyles: { fillColor: [34, 139, 34] },
        styles: { cellPadding: 3, fontSize: 9 },
        columnStyles: {
          0: { cellWidth: 25 },
          1: { cellWidth: 30 },
          2: { cellWidth: 60 },
          3: { cellWidth: 25 },
          4: { cellWidth: 20 }
        }
      });
    }
    
    // Add approval notes if they exist
    if (reconciliation.reconciliation?.notes) {
      doc.setFontSize(14);
      doc.text(`Approval Notes`, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 20 : 180);
      
      doc.setFontSize(12);
      const splitNotes = doc.splitTextToSize(reconciliation.reconciliation.notes, 180);
      doc.text(splitNotes, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 30 : 190);
    }
    
    // Add bank details if reimbursement is needed
    if (reconciliation.remainingBalance < 0 && reconciliation.bankDetails) {
      doc.setFontSize(14);
      doc.text(`Reimbursement Details`, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 50 : 220);
      
      doc.setFontSize(12);
      doc.text(`Account Name: ${reconciliation.bankDetails.accountName}`, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 60 : 230);
      doc.text(`Account Number: ${reconciliation.bankDetails.accountNumber}`, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 70 : 240);
      doc.text(`Bank: ${reconciliation.bankDetails.bankName}`, 15, doc.lastAutoTable ? doc.lastAutoTable.finalY + 80 : 250);
    }
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(`Generated by HRMS Travel System`, 15, doc.internal.pageSize.height - 10);
    
    // Save the PDF
    doc.save(`Reconciliation_Approval_${reconciliation.id}.pdf`);
  } catch (error) {
    console.error("Error generating PDF:", error);
    throw error;
  }
};

const formatDate = (date) => {
  if (!date) return "N/A";
  const d = new Date(date);
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

const formatCurrency = (amount, currency) => {
  if (isNaN(amount)) return "N/A";
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency || 'USD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  }).format(amount);
};


export const generateTravelReconciliationReport = (trip) => {
    try {
        console.log("Generating travel reconciliation report for trip:", trip);
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(18);
      doc.setTextColor(40, 40, 40);
      doc.text(`Travel Reconciliation Report`, 15, 20);
      
      // Add subtitle
      doc.setFontSize(12);
      doc.text(`Trip ID: ${trip.id}`, 15, 30);
      doc.text(`Status: ${trip.status.charAt(0).toUpperCase() + trip.status.slice(1)}`, 15, 40);
      
      // Add employee info
      doc.setFontSize(14);
      doc.text(`Employee Information`, 15, 55);
      
      doc.setFontSize(12);
      doc.text(`Name: ${trip.employeeName}`, 15, 65);
      doc.text(`Department: ${trip.department}`, 15, 75);
      
      // Add trip details
      doc.setFontSize(14);
      doc.text(`Trip Details`, 15, 90);
      
      doc.setFontSize(12);
      doc.text(`Purpose: ${trip.purpose}`, 15, 100);
      doc.text(`Destination: ${trip.city}, ${trip.country}`, 15, 110);
      doc.text(`Travel Period: ${formatDate(trip.departureDate)} - ${formatDate(trip.returnDate)}`, 15, 120);
      
      // Add financial summary
      doc.setFontSize(14);
      doc.text(`Financial Summary`, 15, 135);
      
      const totalExpenses = trip.expenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);
      const remainingBalance = trip.perDiemAmount - totalExpenses;
      
      const financialData = [
        ['Per Diem Allowance', formatCurrency(trip.perDiemAmount, trip.currency)],
        ['Total Expenses', formatCurrency(totalExpenses, trip.currency)],
        ['Remaining Balance', formatCurrency(remainingBalance, trip.currency)]
      ];
      
      autoTable(doc, {
        startY: 145,
        head: [['Item', 'Amount']],
        body: financialData,
        theme: 'grid',
        headStyles: { fillColor: [33, 150, 243] },
        styles: { cellPadding: 5 }
      });
      
      // Add payment card details
      doc.setFontSize(14);
      doc.text(`Payment Card`, 15, doc.lastAutoTable.finalY + 20);
      
      doc.setFontSize(12);
      doc.text(`Card Type: ${trip.cardDetails?.type || 'N/A'}`, 15, doc.lastAutoTable.finalY + 30);
      doc.text(`Card Number: **** ${trip.cardDetails?.lastFour || '0000'}`, 15, doc.lastAutoTable.finalY + 40);
      doc.text(`Card Holder: ${trip.cardDetails?.holder || 'N/A'}`, 15, doc.lastAutoTable.finalY + 50);
      
      // Add expense details if they exist
      if (trip.expenses && trip.expenses.length > 0) {
        doc.setFontSize(14);
        doc.text(`Expense Details`, 15, doc.lastAutoTable.finalY + 70);
        
        const expenseData = trip.expenses.map(expense => [
          formatDate(expense.date),
          expense.category,
          expense.description,
          formatCurrency(expense.amount, trip.currency),
          expense.receipt ? 'Yes' : 'No'
        ]);
        
        autoTable(doc, {
          startY: doc.lastAutoTable.finalY + 80,
          head: [['Date', 'Category', 'Description', 'Amount', 'Receipt']],
          body: expenseData,
          theme: 'grid',
          headStyles: { fillColor: [33, 150, 243] },
          styles: { cellPadding: 3, fontSize: 9 },
          columnStyles: {
            0: { cellWidth: 25 },
            1: { cellWidth: 30 },
            2: { cellWidth: 60 },
            3: { cellWidth: 25 },
            4: { cellWidth: 20 }
          }
        });
      }
      
      // Add travel arrangements
      doc.setFontSize(14);
      doc.text(`Travel Arrangements`, 15, doc.lastAutoTable.finalY + 20);
      
      doc.setFontSize(12);
      doc.text(`Outbound Flight: ${trip.travelArrangements?.flight?.outbound?.airline || 'N/A'} ${trip.travelArrangements?.flight?.outbound?.flightNumber || ''}`, 15, doc.lastAutoTable.finalY + 30);
      doc.text(`Departure: ${formatDateTime(trip.travelArrangements?.flight?.outbound?.departureTime)}`, 15, doc.lastAutoTable.finalY + 40);
      doc.text(`Return Flight: ${trip.travelArrangements?.flight?.return?.airline || 'N/A'} ${trip.travelArrangements?.flight?.return?.flightNumber || ''}`, 15, doc.lastAutoTable.finalY + 50);
      doc.text(`Departure: ${formatDateTime(trip.travelArrangements?.flight?.return?.departureTime)}`, 15, doc.lastAutoTable.finalY + 60);
      
      // Add accommodation
      doc.setFontSize(14);
      doc.text(`Accommodation`, 15, doc.lastAutoTable.finalY + 80);
      
      doc.setFontSize(12);
      doc.text(`${trip.travelArrangements?.accommodation?.name || 'N/A'}`, 15, doc.lastAutoTable.finalY + 90);
      doc.text(`Check-in: ${formatDate(trip.travelArrangements?.accommodation?.checkIn)}`, 15, doc.lastAutoTable.finalY + 100);
      doc.text(`Check-out: ${formatDate(trip.travelArrangements?.accommodation?.checkOut)}`, 15, doc.lastAutoTable.finalY + 110);
      
      // Add reconciliation details if reconciled
      if (trip.reconciliation) {
        doc.setFontSize(14);
        doc.text(`Reconciliation Details`, 15, doc.lastAutoTable.finalY + 130);
        
        doc.setFontSize(12);
        doc.text(`Status: ${trip.reconciliation.status.charAt(0).toUpperCase() + trip.reconciliation.status.slice(1)}`, 15, doc.lastAutoTable.finalY + 140);
        doc.text(`Submitted: ${formatDateTime(trip.reconciliation.submittedDate)}`, 15, doc.lastAutoTable.finalY + 150);
        if (trip.reconciliation.approvedDate) {
          doc.text(`Approved: ${formatDateTime(trip.reconciliation.approvedDate)}`, 15, doc.lastAutoTable.finalY + 160);
        }
        if (trip.reconciliation.notes) {
          const notes = doc.splitTextToSize(trip.reconciliation.notes, 180);
          doc.text(`Notes:`, 15, doc.lastAutoTable.finalY + 170);
          doc.text(notes, 20, doc.lastAutoTable.finalY + 180);
        }
      }
      
      // Add footer
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text(`Generated by HRMS Travel System - ${formatDateTime(new Date())}`, 15, doc.internal.pageSize.height - 10);
      
      // Save the PDF
      doc.save(`Travel_Reconciliation_${trip.id}.pdf`);
    } catch (error) {
      console.error("Error generating travel reconciliation PDF:", error);
      throw error;
    }
  };
  
  const formatDateTime = (date) => {
    if (!date) return "N/A";
    const d = new Date(date);
    return d.toLocaleString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };